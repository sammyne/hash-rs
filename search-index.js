var searchIndex = JSON.parse('{\
"hash":{"doc":"Crate hash provides interfaces for hash functions.","t":[8,8,8,0,10,0,0,0,0,10,10,10,10,10,3,17,11,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,12,17,17,3,17,17,3,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,5,12,17,17,17,3,11,11,5,11,11,11,11,11,11,11,11,5,5,11,11,11,11,5,5,5,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Hash","Hash32","Hash64","adler32","block_size","crc32","crc64","fnv","maphash","reset","size","sum","sum32","sum64","Digest","SIZE","block_size","borrow","borrow_mut","checksum","flush","from","into","new","reset","size","sum","sum32","try_from","try_into","type_id","write","0","CASTAGNOLI","IEEE","IEEE_TABLE","KOOPMAN","SIZE","Table","borrow","borrow","borrow_mut","borrow_mut","checksum","checksum_ieee","clone","clone_into","default","deref","deref","deref_mut","eq","from","from","into","into","make_table","new","new_ieee","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","0","ECMA","ISO","SIZE","Table","borrow","borrow_mut","checksum","clone","clone_into","default","deref","deref_mut","eq","from","into","make_table","new","to_owned","try_from","try_into","type_id","update","new128","new128a","new32","new32a","new64","new64a","Hash","Seed","block_size","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","flush","from","from","into","into","make_seed","new","new","reset","seed","set_seed","size","sum","sum64","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write_byte","write_string"],"q":["hash","","","","","","","","","","","","","","hash::adler32","","","","","","","","","","","","","","","","","","hash::crc32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hash::crc64","","","","","","","","","","","","","","","","","","","","","","","hash::fnv","","","","","","hash::maphash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Hash is the common interface implemented by all hash …","Hash32 is the common interface implemented by all 32-bit …","Hash64 is the common interface implemented by all 64-bit …","Module adler32 implements the Adler-32 checksum.","block_size returns the hash’s underlying block size. The …","Module crc32 implements the 32-bit cyclic redundancy …","Module crc64 implements the 64-bit cyclic redundancy …","Module fnv implements FNV-1 and FNV-1a, non-cryptographic …","Module maphash provides hash functions on byte sequences.","reset resets the Hash to its initial state.","size returns the number of bytes Sum will return.","sum appends the current hash to b and returns the …","","","digest represents the partial evaluation of a checksum. …","The size of an Adler-32 checksum in bytes.","","","","checksum returns the Adler-32 checksum of data.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","new returns a new hash.Hash32 computing the Adler-32 …","","","","","","","","","","Castagnoli’s polynomial, used in iSCSI. Has better error …","IEEE is by far and away the most common CRC-32 polynomial. …","IEEE_TABLE is the table for the IEEE polynomial.","Koopman’s polynomial. Also has better error detection …","The size of a CRC-32 checksum in bytes.","Table is a 256-word table representing the polynomial for …","","","","","checksum returns the CRC-32 checksum of data using the …","checksum_ieee returns the CRC-32 checksum of data using …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","make_table returns a Table constructed from the specified …","new creates a new <code>Hash32</code> computing the CRC-32 checksum …","new_ieee creates a new <code>Hash32</code> computing the CRC-32 …","","","","","","","","update returns the result of adding the bytes in p to the …","","The ECMA polynomial, defined in ECMA 182.","The ISO polynomial, defined in ISO 3309 and used in HDLC.","The size of a CRC-64 checksum in bytes.","Table is a 256-word table representing the polynomial for …","","","checksum returns the CRC-64 checksum of data using the …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","make_table returns a Table constructed from the specified …","new creates a new hash::Hash64 computing the CRC-64 …","","","","","update returns the result of adding the bytes in p to the …","new128 returns a new 128-bit FNV-1 Hash. Its sum method …","new128a returns a new 128-bit FNV-1a Hash. Its sum method …","new32 returns a new 32-bit FNV-1 Hash. Its sum method will …","new32a returns a new 32-bit FNV-1a Hash. Its sum method …","new64 returns a new 64-bit FNV-1 Hash. Its sum method will …","new64a returns a new 64-bit FNV-1a Hash. Its sum method …","A Hash computes a seeded hash of a byte sequence.","A Seed is a random value that selects the specific hash …","block_size returns h’s block size.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","make_seed returns a new random seed.","","new makes a random seed. ","reset discards all bytes added to h. (The seed remains the …","seed returns h’s seed value.","set_seed sets h to use seed, which must have been returned …","size returns h’s hash value size, 8 bytes.","sum appends the hash’s current 64-bit value to b. It …","sum64 returns h’s current 64-bit value, which depends on …","","","","","","","","write adds b to the sequence of bytes hashed by h. It …","write_byte adds b to the sequence of bytes hashed by h. It …","write_string adds the bytes of s to the sequence of bytes …"],"i":[0,0,0,0,19,0,0,0,0,19,19,19,9,18,0,0,7,7,7,0,7,7,7,0,7,7,7,7,7,7,7,7,13,0,0,0,0,0,0,14,13,14,13,0,0,13,13,13,14,13,13,13,14,13,14,13,0,0,0,13,14,13,14,13,14,13,0,17,0,0,0,0,17,17,0,17,17,17,17,17,17,17,17,0,0,17,17,17,17,0,0,0,0,0,0,0,0,0,20,20,21,20,21,21,21,20,20,21,20,21,0,20,21,20,20,20,20,20,20,21,20,21,20,21,20,21,20,20,20],"f":[0,0,0,0,[[],1],0,0,0,0,[[]],[[],1],[[[4,[[3,[2]]]]],[[3,[2]]]],[[],5],[[],6],0,0,[7,1],[[]],[[]],[[],5],[7,8],[[]],[[]],[[],9],[7],[7,1],[[7,[4,[[3,[2]]]]],[[3,[2]]]],[7,5],[[],10],[[],10],[[],11],[7,[[8,[12]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[13,5],[[],5],[13,13],[[]],[[],13],[14,13],[13],[13],[[13,13],15],[[]],[[]],[[]],[[]],[5,13],[13,[[16,[9]]]],[[],[[16,[9]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[5,13],5],0,0,0,0,0,[[]],[[]],[17,6],[17,17],[[]],[[],17],[17],[17],[[17,17],15],[[]],[[]],[6,17],[17,[[16,[18]]]],[[]],[[],10],[[],10],[[],11],[[6,17],6],[[],19],[[],19],[[],9],[[],9],[[],18],[[],18],0,0,[20,1],[[]],[[]],[[]],[[]],[21,21],[[]],[20,8],[[]],[[]],[[]],[[]],[[],21],[[],20],[[],21],[20],[20,21],[[20,21]],[20,1],[[20,[4,[[3,[2]]]]],[[3,[2]]]],[20,6],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[20,[[8,[12]]]],[[20,2],8],[20,[[8,[12]]]]],"p":[[15,"isize"],[15,"u8"],[3,"Vec"],[4,"Option"],[15,"u32"],[15,"u64"],[3,"Digest"],[6,"Result"],[8,"Hash32"],[4,"Result"],[3,"TypeId"],[15,"usize"],[3,"Table"],[3,"IEEE_TABLE"],[15,"bool"],[3,"Box"],[3,"Table"],[8,"Hash64"],[8,"Hash"],[3,"Hash"],[3,"Seed"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
