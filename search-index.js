var searchIndex = JSON.parse('{\
"hash":{"doc":"Crate hash provides interfaces for hash functions.","t":[8,8,8,10,0,10,10,10,10,10,12,17,17,3,17,17,3,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,5],"n":["Hash","Hash32","Hash64","block_size","crc32","reset","size","sum","sum32","sum64","0","CASTAGNOLI","IEEE","IEEE_TABLE","KOOPMAN","SIZE","Table","borrow","borrow","borrow_mut","borrow_mut","checksum","checksum_ieee","clone","clone_into","default","deref","deref","deref_mut","eq","from","from","into","into","make_table","new","new_ieee","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update"],"q":["hash","","","","","","","","","","hash::crc32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Hash is the common interface implemented by all hash …","Hash32 is the common interface implemented by all 32-bit …","Hash64 is the common interface implemented by all 64-bit …","block_size returns the hash’s underlying block size. The …","Module crc32 implements the 32-bit cyclic redundancy …","reset resets the Hash to its initial state.","size returns the number of bytes Sum will return.","sum appends the current hash to b and returns the …","","","","Castagnoli’s polynomial, used in iSCSI. Has better error …","IEEE is by far and away the most common CRC-32 polynomial. …","IEEE_TABLE is the table for the IEEE polynomial.","Koopman’s polynomial. Also has better error detection …","The size of a CRC-32 checksum in bytes.","Table is a 256-word table representing the polynomial for …","","","","","checksum returns the CRC-32 checksum of data using the …","checksum_ieee returns the CRC-32 checksum of data using …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","make_table returns a Table constructed from the specified …","new creates a new <code>Hash32</code> computing the CRC-32 checksum …","new_ieee creates a new <code>Hash32</code> computing the CRC-32 …","","","","","","","","update returns the result of adding the bytes in p to the …"],"i":[0,0,0,14,0,14,14,14,10,15,7,0,0,0,0,0,0,8,7,8,7,0,0,7,7,7,8,7,7,7,8,7,8,7,0,0,0,7,8,7,8,7,8,7,0],"f":[0,0,0,[[],1],0,[[]],[[],1],[[[4,[[3,[2]]]]],[[3,[2]]]],[[],5],[[],6],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[7,5],[[],5],[7,7],[[]],[[],7],[8,7],[7],[7],[[7,7],9],[[]],[[]],[[]],[[]],[5,7],[7,[[11,[10]]]],[[],[[11,[10]]]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[5,7],5]],"p":[[15,"isize"],[15,"u8"],[3,"Vec"],[4,"Option"],[15,"u32"],[15,"u64"],[3,"Table"],[3,"IEEE_TABLE"],[15,"bool"],[8,"Hash32"],[3,"Box"],[4,"Result"],[3,"TypeId"],[8,"Hash"],[8,"Hash64"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
